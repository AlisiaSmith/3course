import runtime;
import string;
import lingo/pegcode/driver;


Expr ::= IntConst, Mul, Add;
IntConst: (value: int);
Mul: (l: Expr, r: Expr); //1*2*3*4
Add: (l: Expr, r: Expr);

Parse(s: string) -> Expr {
    gram = "#include ex.gram";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

Calc(e:Expr)->int{
    switch (e : Expr) {
    IntConst(c):c;
    Mul(l,r):Calc(l)*Calc(r);
    Add(l,r):Calc(l)+Calc(r);
    }
}

Print(e:Expr)->string{
    switch (e : Expr) {
        IntConst(c):i2s(c);
        Mul(l,r):"("+Print(l)+"*"+Print(r)+")";
        Add(l,r):"("+Print(l)+"+"+Print(r)+")";
    }
}



main(){
    exp = "((5  * 1) + (3 * 3 ))";
    p_exp = Parse(exp);
    res = Calc(p_exp);
    
    println(exp);
    println(Print(p_exp));
    println(res);
   
    quit(0);
}