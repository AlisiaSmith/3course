import runtime;
import string;
import lingo/pegcode/driver;
import math/math;


Expr ::= IntConst, Rational, Neg, Add, Sub, Mul, Div;
IntConst: (v: int);
Rational: (i: int, d:int);
Neg: (value: Expr);
Add: (l: Expr, r: Expr);
Sub: (l: Expr, r: Expr);
Mul: (l: Expr, r: Expr); 
Div: (l: Expr, r: Expr);


Parse(s: string) -> Expr {
    gram = "#include ex.lingo";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

i2rat(i: int) -> Rational {
    Rational(i, 1);
}

ratMul(l:Rational, r:Rational) -> Rational {
    i = l.i*r.i;
    d = l.d*r.d;
    Rational(i/gcd(i, d), d/gcd(i, d));
}

ratAdd(l:Rational, r:Rational) -> Rational {
    i = l.i*r.d + r.i*l.d;
    d = l.d*r.d;
    Rational(i/gcd(i, d), d/gcd(i, d));
}

ratSub(l:Rational, r:Rational) -> Rational {
    i = l.i*r.d - r.i*l.d;
    d = l.d*r.d;
    Rational(i/gcd(i, d), d/gcd(i, d));
}

ratDiv(l:Rational, r:Rational) -> Rational {
    i = l.i*r.d;
    d = l.d*r.i;
    Rational(i/gcd(i, d), d/gcd(i, d));
}

ratNeg(r:Rational) -> Rational {
    Rational(0 - r.i, r.d);
}

Calc(e:Expr)-> Rational {
    switch (e : Expr) {
    IntConst(c):    i2rat(c);
    Rational(l, r): Rational(l,r);
    Neg(c):     ratNeg(Calc(c));
    Add(l,r):   ratAdd(Calc(l), Calc(r));
    Sub(l,r):   ratSub(Calc(l), Calc(r));
    Mul(l,r):   ratMul(Calc(l), Calc(r));
    Div(l,r):   ratDiv(Calc(l), Calc(r)); 
    }
}

Print(e:Expr)->string{
    switch (e : Expr) {
        IntConst(c):i2s(c);
        Rational(i,f): 
            if 
                (f == 1)  i2s(i)
            else
                "("+i2s(i)+"/"+i2s(f)+")";
        Neg(c): "(-"+Print(c)+")";
        Add(l,r): "("+Print(l)+"+"+Print(r)+")";
        Sub(l,r): "("+Print(l)+"-"+Print(r)+")";
        Mul(l,r): "("+Print(l)+"*"+Print(r)+")";
        Div(l,r): "("+Print(l)+"/"+Print(r)+")"; 
    }
}

main(){

    exp = "((5  * 1) + (3 / (-3) ))";
    p_exp = Parse(exp);
    res = Calc(p_exp);
    
    println(exp);
    println(Print(p_exp));
    println(Print(res));

    quit(0);
}