import runtime;
import string;
import lingo/pegcode/driver;
import math/math;
import ds/tree;


Expr ::= IntConst, Rational, Neg, Var, Add, Sub, Mul, Div;
IntConst: (v: int);
Rational: (i: int, d:int);
Neg: (value: Expr);
Var: (value: string);
Add: (l: Expr, r: Expr);
Sub: (l: Expr, r: Expr);
Mul: (l: Expr, r: Expr); 
Div: (l: Expr, r: Expr);


Parse(s: string) -> Expr {
    gram = "#include ex.lingo";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

i2rat(i: int) -> Rational {
    Rational(i, 1);
}

ratMul(l:Maybe<Rational>, r:Maybe<Rational>) -> Maybe<Rational> {
    switch(l){
    None(): None();
    Some(a): switch(r){
        None(): None()
        Some(b):{
            i = a.i*b.i;
            d = a.d*b.d;
            Some(Rational(i/gcd(i, d), d/gcd(i, d)));
            }
        }
    }
}

ratAdd(l:Maybe<Rational>, r:Maybe<Rational>) -> Maybe<Rational> {
    switch(l){
        None(): None();
        Some(a): switch(r){
            None(): None()
            Some(b):{
                i = a.i*b.d + b.i*a.d;
                d = a.d*b.d;
                Some(Rational(i/gcd(i, d), d/gcd(i, d)));
            }
        }
    }  
}

ratSub(l:Maybe<Rational>, r:Maybe<Rational>) -> Maybe<Rational> {
    switch(l){
        None(): None();
        Some(a): switch(r){
            None(): None();
            Some(b):{
                i = a.i*b.d - b.i*a.d;
                d = a.d*b.d;
                Some(Rational(i/gcd(i, d), d/gcd(i, d)));
            }
        }
    }  
}

ratDiv(l:Maybe<Rational>, r:Maybe<Rational>) -> Maybe<Rational> {
    switch(l){
        None(): None();
        Some(a): switch(r){
            None(): None();
            Some(b):{
                i = a.i*b.d;
                d = a.d*b.i;
                Some(Rational(i/gcd(i, d), d/gcd(i, d)));
            }
        }
    } 
}

ratNeg(r:Maybe<Rational>) -> Maybe<Rational> {
        switch(r){
    None(): None();
    Some(n): Some(Rational(0 - n.i, n.d));
    }
}

Calc(e:Expr, tree:Tree<string, int>)-> Maybe <Rational> {
    switch (e : Expr) {
    IntConst(c):    Some(i2rat(c));
    Rational(l, r): Some(Rational(l,r));
    Neg(c):     maybeBind(Calc(c, tree), \ v1 -> ratNeg(Some(v1)));
    Add(l,r):   maybeBind(Calc(l, tree), \ v1 -> maybeBind(Calc(r, tree), \ v2 -> ratAdd(Some(v1), Some(v2))));
    Sub(l,r):   maybeBind(Calc(l, tree), \ v1 -> maybeBind(Calc(r, tree), \ v2 -> ratSub(Some(v1), Some(v2))));
    Mul(l,r):   maybeBind(Calc(l, tree), \ v1 -> maybeBind(Calc(r, tree), \ v2 -> ratMul(Some(v1), Some(v2))));
    Div(l,r):   maybeBind(Calc(l, tree), \ v1 -> maybeBind(Calc(r, tree), \ v2 -> ratDiv(Some(v1), Some(v2))));
    Var(s): {
        switch(lookupTree(tree, s)) {
            None() : None();
            Some(v) : Some(i2rat(v));
            }
        }
    }
}

Print(e:Expr)->string{
    switch (e : Expr) {
        IntConst(c):i2s(c);
        Rational(i,f): 
            if 
                (f == 1)  i2s(i)
            else
                "("+i2s(i)+"/"+i2s(f)+")";
        Neg(c): "(-"+Print(c)+")";
        Add(l,r): "("+Print(l)+"+"+Print(r)+")";
        Sub(l,r): "("+Print(l)+"-"+Print(r)+")";
        Mul(l,r): "("+Print(l)+"*"+Print(r)+")";
        Div(l,r): "("+Print(l)+"/"+Print(r)+")"; 
        Var(s): s;
    }
}

main(){

    tree = setTree(makeTree(), "x", 10);
    
    

    exp = "(-(- ((5  * 1) - (3 / (x + (-1)) ))))";
    p_exp = Parse(exp);
       
    println(exp);
    println(Print(p_exp));
    
    switch(Calc(p_exp, tree))
    {
        None() : println("Wrong!");
        Some(v) : println(Print(v))
    }

    quit(0);
}