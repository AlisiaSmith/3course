import runtime;
import string;
import lingo/pegcode/driver;


Expr ::= IntConst, FloatConst, Neg, Add, Sub, Mul, Div;
IntConst: (value: int);
FloatConst: (integer: int, fractional:int);
Neg: (value: Expr);
Add: (l: Expr, r: Expr);
Sub: (l: Expr, r: Expr);
Mul: (l: Expr, r: Expr); 
Div: (l: Expr, r: Expr);

Parse(s: string) -> Expr {
    gram = "#include ex.lingo";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

/*Calc(e:Expr)->int{
    switch (e : Expr) {
    IntConst(c):c;
    FloatConst(i,f):
    Neg(c):0 - Calc(c);
    Add(l,r):Calc(l)+Calc(r);
    Sub(l,r):Calc(l)-Calc(r);
    Mul(l,r):Calc(l)*Calc(r);
    Div(l,r):Calc(i)/Calc(r); 
    }
}*/

Print(e:Expr)->string{
    switch (e : Expr) {
        IntConst(c):i2s(c);
        FloatConst(i,f): i2s(i)+","+i2s(f);
        Neg(c): "-"+Print(c);
        Add(l,r): "("+Print(l)+"+"+Print(r)+")";
        Sub(l,r): "("+Print(l)+"-"+Print(r)+")";
        Mul(l,r): "("+Print(l)+"*"+Print(r)+")";
        Div(l,r): "("+Print(l)+"/"+Print(r)+")"; 
    }
}

main(){
    //exp = Neg(Add(Mul(IntConst(3), Add(IntConst(4), Neg(FloatConst(2, 5)))), Sub(IntConst(2), IntConst(6))));
   // exp = Neg(IntConst(2));
    e = "(4+4)";
    exp = Parse(e);
    println(Print(exp));
   /* exp = "((5  * 1) + (3 * 3 ))";
    p_exp = Parse(exp);
    res = Calc(p_exp);
    
    println(exp);
    println(Print(p_exp));
    println(res);
   */
    quit(0);
}