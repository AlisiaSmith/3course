import runtime;
import string;
import lingo/pegcode/driver;

ExprRPN ::= IntConstRPN, MulRPN, AddRPN;
IntConstRPN: (value: int);
MulRPN: (); 
AddRPN: ();

Expr ::= IntConst, Mul, Add;
IntConst: (value: int);
Mul: (l: Expr, r: Expr); 
Add: (l: Expr, r: Expr); 

s2ar(s: string) -> Expr {
    gram = "#include ex.lingo";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

pop(stack: ref [?])->?{
    element=^stack[length(^stack)-1];
    stack := subrange(^stack, 0, length(^stack)-1);
    element;
}

ar2rpn(e: Expr)->[ExprRPN]{
	switch (e) {
		Add(l, r): concat(concat(ar2rpn(l), ar2rpn(r)), [AddRPN()]);
		Mul(l, r): concat(concat(ar2rpn(l), ar2rpn(r)), [MulRPN()]);
		IntConst(c): [IntConstRPN(c)];
	}

}

_rpn2ar(e: ref[ExprRPN])-> Expr { 
    switch(pop(e))
    {
        AddRPN(): Add(_rpn2ar(e), _rpn2ar(e));
        MulRPN(): Mul(_rpn2ar(e), _rpn2ar(e));
        IntConstRPN(c) : IntConst(c);
    }

}

rpn2ar(e: [ExprRPN])-> Expr{
    _rpn2ar(ref ar2rpn(_rpn2ar(ref e)));
}

Calc(e : Expr)->int{
    switch (e : Expr) {
    IntConst(c):c;
    Mul(l,r):Calc(l)*Calc(r);
    Add(l,r):Calc(l)+Calc(r);
    }
}   

CalcRPN(e: [ExprRPN])->int{
    r = fold(e, ref[], \stack, exp ->{
        switch(exp){
            IntConstRPN(c): refArrayPush(stack, c);
            MulRPN(): refArrayPush(stack, pop(stack)*pop(stack));
            AddRPN(): refArrayPush(stack, pop(stack)+pop(stack));
        };
        stack;
    })
    pop(r);
};

ar2s(e:Expr)->string{
    switch (e : Expr) {
        IntConst(c):i2s(c);
        Mul(l,r):"("+ar2s(l)+"*"+ar2s(r)+")";
        Add(l,r):"("+ar2s(l)+"+"+ar2s(r)+")";
    }

}

rpn2s(e: [ExprRPN]) -> string {
    
    fold(e, "", \str, r -> {
		switch(r) {
			AddRPN():  str + "+ "; 
    		MulRPN(): str + "* ";
            IntConstRPN(a): str + i2s(a) + " ";
			}
		}
	)
}

main(){

    strexp = "((8 * (4 + 1)) + 2)";
    exp =s2ar(strexp);
    println(ar2s(exp));
    println(Calc(exp));

    rpnexp = ar2rpn(exp);
    println(rpn2s(rpnexp));
    println(CalcRPN(rpnexp));

    newexp = rpn2ar(rpnexp);
    println(ar2s(newexp));
    println(Calc(newexp));

    quit(0);
}