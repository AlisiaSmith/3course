import runtime;
import string;
import lingo/pegcode/driver;

Expr ::= Add, Mul, IntConst;
Add(lhs: Expr, rhs: Expr);
Mul(lhs: Expr, rhs: Expr);
IntConst(val: int);

RPN ::= OpRPN, ValRPN;
ValRPN(val: int);
OpRPN ::= AddRPN, MulRPN;
AddRPN();
MulRPN();

s2ar(s: string) -> Expr {
    gram = "#include ex.gram";
    parsic(compilePegGrammar(gram), s, defaultPegActions)
}

ExprCalc(e : Expr) -> int {
    switch(e: Expr) {
        Add(a, b): ExprCalc(a) + ExprCalc(b)
        Mul(a, b): ExprCalc(a) * ExprCalc(b)
        IntConst(a): a
    }
}

ar2s(e : Expr) -> string {
 switch (e : Expr) {
        IntConst(c):i2s(c);
        Mul(l,r):"("+ar2s(l)+"*"+ar2s(r)+")";
        Add(l,r):"("+ar2s(l)+"+"+ar2s(r)+")";
    }
}

rpn2s(e : [RPN], str : string) -> string {
	iter(e, \v -> {
			switch(v) {
				AddRPN() : str + "+ ";
				MulRPN() : str + "* ";
				ValRPN(a) : str + (i2s(a)) + " ";
			}
	});

	str;
}

ar2rpn(e: Expr) -> [RPN] {
	switch(e: Expr) {
		Add(a, b): concat(concat([AddRPN()], ar2rpn(a)), ar2rpn(b))
		Mul(a, b): concat(concat([MulRPN()], ar2rpn(a)), ar2rpn(b))
		IntConst(a): [ValRPN(a)]
	}
}

ar2rpnsize(e: Expr) -> int {
        switch(e: Expr) {
                Add(a, b): 1 + ar2rpnsize(a) +  ar2rpnsize(b)
                Mul(a, b): 1 + ar2rpnsize(a) +  ar2rpnsize(b)
                IntConst(a): 1
        }
}

rpn2ar(e: [RPN], i: int) -> Maybe<Expr> {
	if(i >= length(e)) {
		None()
	} else {
		switch(e[i]) {
			AddRPN(): {
				left = rpn2ar(e, i + 1);
				len = maybeBind(left, fn2some(\ v -> ar2rpnsize(v) + 1));
				right = maybeBind(len, \ v -> rpn2ar(e, i + v));
				maybeBind(right, \ r -> maybeBind(left, \ l -> Some(Add(l, r))))
			}
			MulRPN(): {
				left = rpn2ar(e, i + 1);
				len = maybeBind(left, fn2some(\ v -> ar2rpnsize(v) + 1));
				right = maybeBind(len, \ v -> rpn2ar(e, i + v));
				maybeBind(right, \ r -> maybeBind(left, \ l -> Some(Mul(l, r))))
			}
			ValRPN(a): Some(IntConst(a))
		}
	}
}


rpn2i(e: [RPN]) -> Maybe<int> {
	ar = rpn2ar(e, 0);
	switch(ar: Maybe) {
		None(): None()
		Some(v): Some(ExprCalc(v))
	}
}

main() {
    str = "(   (5     * 1)   + (   3   * 3    )    )";
    e = s2ar(str);
    r = ar2rpn(e);
    
	rpn2s(r, "");

	switch(rpn2i(r) : Maybe) {
		None() : println("Wrong expression!");
		Some(v) : println(i2s(v));
	}

/*	z : [RPN] = [AddRPN(), MulRPN(), AddRPN()];
	switch(rpn2i(z) : Maybe) {
		None() : println("Wrong expression!");
		Some(v) : println(i2s(v));
	}
*/
    quit(0);
}